#!groovy

@Library('myjenkinslib') _

def tools = new org.devops.tools()

String workspace = "/opt/jenkins/workspace"

//Pipeline
pipeline {
    environment{
        test = 'abcd'
    }
    agent { node {  label "master"   //指定运行节点的标签或者名称
                    customWorkspace "${workspace}"   //指定运行工作目录（可选）
            }
    }
// 没有用 未知？
//    tools {
//        maven 'm2'
//    }

    options {
        timestamps()  //日志会打印有时间
        skipDefaultCheckout()  //删除隐式checkout scm语句
        disableConcurrentBuilds() //禁止并行
        timeout(time: 1, unit: 'HOURS')  //流水线超时设置1h
    }

    stages {
        //下载代码
        stage("GetCode"){ //阶段名称
            //when { environment name: 'test', value: 'abcd' }//该段会去进行判断，如果判断没有该环境变量过那么stage("GetCode")则不会执行。
            steps{  //步骤
                timeout(time:5, unit:"MINUTES"){   //步骤超时时间
                    script{ //填写运行代码
                        println('获取代码')
                        tools.PrintMes("获取代码",'green')
                        println("${test}")//打印出环境变量$test
                        
                        input id: 'Check your Process ! ', message: '是继续构建？', ok: '是，继续！', parameters: [choice(choices: ['True', 'False'], description: '', name: 'This is a example of input choose')], submitter: 'kid,admin'
                        
                        input id: 'Input Test', message: 'Check U input ', ok: 'button01', parameters: [choice(choices: ['True', 'False', 'Unknown'], description: '测试 input 功能', name: 'T or F')], submitter: 'kid,admin'
                        

                        input {
                              message 'message01'
                              id 'ID01'
                              ok 'yes or no'
                              submitter 'admin,kid'
                                  parameters {
                                      choice choices: ['A', 'B', 'C'], description: '测试申明样式的input', name: 'choose one'
                                             }
                                }
                    }
                }
            }
        }

        stage("01"){
            failFast true
            parallel {
        
                //构建
                stage("Build"){
                    steps{
                        timeout(time:20, unit:"MINUTES"){
                            script{
                                println('应用打包')
                                tools.PrintMes("应用打包",'green')
                                mvnHome = tool "m2"
                                println(mvnHome)
                                
                                sh "${mvnHome}/bin/mvn --version"
                            }
                        }
                    }
                }
        
                //代码扫描
                stage("CodeScan"){
                    steps{
                        //无法直接在steps当中使用sh命令。
                        //sh 'mvn --version'
                        timeout(time:30, unit:"MINUTES"){
                            script{
                                print("代码扫描")
                                tools.PrintMes("代码扫描",'green')
                            }
                        }
                    }
                }
            }
        }
    }

    //构建后操作
    post {
        always {
            script{
                println("always")
            }
        }

        success {
            script{
                currentBuild.description = "\n 构建成功!" 
                tools.PrintMes("构建成功",'green')
            }
        }

        failure {
            script{
                currentBuild.description = "\n 构建失败!" 
                tools.PrintMes("构建失败",'red')
            }
        }

        aborted {
            script{
                currentBuild.description = "\n 构建取消!" 
                tools.PrintMes("构建取消",'blue')
            }
        }
    }
}
